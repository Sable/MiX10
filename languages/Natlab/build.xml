<project name="Natlab" default="build">
	<!-- load properties -->
	<property file="natlab.properties" />

  <!-- setup a local basename -->
  <dirname property="Natlab.basedir" file="${ant.file.Natlab}" />

	<!-- useful paths -->
	<path id="jflex.jar.path" path="${lib.dir}/${jflex.jar.path.prop}" />
	<path id="beaver.jar.path" path="${lib.dir}/${beaver.jar.path.prop}" />
	<path id="beaver.rt.jar.path" path="${lib.dir}/${beaver.rt.jar.path.prop}" />
	<path id="jastadd.jar.path" path="${lib.dir}/${jastadd.jar.path.prop}" />
	<path id="jastaddparser.jar.path" path="${lib.dir}/${jastaddparser.jar.path.prop}" />
	<path id="junit.jar.path" path="${lib.dir}/${junit.jar.path.prop}" />
  <path id="guava.jar.path" path="${lib.dir}/${guava.jar.path.prop}" />
	<path id="antlr.jar.path">
		<fileset dir="${lib.dir}">
			<include name="${antlr.task.jar.path.prop}" />
			<include name="${antlr3.jar.path.prop}" />
			<include name="${string.template.jar.path.prop}" />
			<include name="${antlr2.jar.path.prop}" />
		</fileset>
	</path>

	<!--=====================================================================-->
	<!-- Private Targets                                                     -->
	<!--=====================================================================-->

	<import file="../shared/taskdef.xml" />
	<import file="../shared/gen.xml" />
	<import file="../shared/compile.xml" />
	<import file="../shared/bindir.xml" />
	<import file="../shared/options.xml" />

	<!-- Extend and override parts of gen.xml -->
  <import optional="true" file="local.xml" />

	<target name="compile.test.generators" unless="inside.eclipse">
		<mkdir dir="${ant.bin.dir}" />
		<javac destdir="${ant.bin.dir}">
			<src path="${test.dir}" />
			<include name="**/*TestGenerator.java" />
		</javac>
	</target>

	<target name="gen.scanner.tests" depends="set.bin.dir">
		<java classname="${lexer.test.generator.class}" classpath="${bin.dir}">
			<arg value="${basedir}/${lexer.test.list.file}" />
			<arg value="${basedir}/${gen.dir}" />
		</java>
	</target>

	<target name="gen.parser.pass.tests" depends="set.bin.dir">
		<java classname="${parser.pass.test.generator.class}" classpath="${bin.dir}">
			<arg value="${basedir}/${parser.pass.test.list.file}" />
			<arg value="${basedir}/${gen.dir}" />
		</java>
	</target>

	<target name="gen.parser.fail.tests" depends="set.bin.dir">
		<java classname="${parser.fail.test.generator.class}" classpath="${bin.dir}">
			<arg value="${basedir}/${parser.fail.test.list.file}" />
			<arg value="${basedir}/${gen.dir}" />
		</java>
	</target>

  <target name="gen.multireturn.pass.tests" depends="set.bin.dir">
    <java classname="${multireturn.pass.test.generator.class}" classpath="${bin.dir}">
      <arg value="${basedir}/${multireturn.pass.test.list.file}" />
      <arg value="${basedir}/${gen.dir}" />
    </java>
  </target>

  <target name="gen.leftthreeaddress.pass.tests" depends="set.bin.dir">
    <java classname="${leftthreeaddress.pass.test.generator.class}" classpath="${bin.dir}">
      <arg value="${basedir}/${leftthreeaddress.pass.test.list.file}" />
      <arg value="${basedir}/${gen.dir}" />
    </java>
  </target>

  <target name="gen.simplifications.pass.tests" depends="set.bin.dir">
    <java classname="${simplifications.pass.test.generator.class}" classpath="${bin.dir}">
      <arg value="${basedir}/${simplifications.pass.test.master.file}" />
      <arg value="${basedir}/${gen.dir}" />
    </java>
  </target>

  <target name="gen.simplification.tests" depends="gen.simplifications.pass.tests" />
	<target name="gen.tests" depends="gen.scanner.tests, gen.parser.pass.tests, gen.parser.fail.tests, gen.simplification.tests" />

	<!-- jflex, beaver, jastadd, and tests -->
	<!-- NB: overrides target from gen.xml -->
	<target name="gen" depends="compile.test.generators, Gen.gen-parser, options" />

	<!-- jflex from metalexer spec -->
	<target name="metalexer">
		<java jar="${lib.dir}/${metalexer.jar.path.prop}" failonerror="true" fork="true">
			<arg value="${layout.name}" />
			<arg value="${src.dir}/${lexer.dir}" />
			<arg value="${gen.dir}/${lexer.dir}" />
		</java>
	</target>

	<!-- generates Java files from JFlex scanner spec -->
	<!-- NB: overrides target from gen.xml -->
	<target name="jflex" depends="def.jflex.task, metalexer">
		<jflex file="${gen.dir}/${lexer.dir}/${layout.name}.flex" destdir="${gen.dir}" nobak="yes" />
	</target>

	<!--=====================================================================-->
	<!-- Matlab Targets                                                      -->
	<!--=====================================================================-->

	<target name="matlab.build" description="call build in the Matlab language">
		<ant dir="${matlab.dir}" target="build" inheritall="false" />
	</target>

	<target name="matlab.clean" description="call clean in the Matlab language">
		<ant dir="${matlab.dir}" target="clean" inheritall="false" />
	</target>

	<target name="matlab.eclipse.build" description="call eclipse.build in the Matlab language">
		<ant dir="${matlab.dir}" target="eclipse.build" inheritall="false" />
	</target>
	<target name="matlab.eclipse.clean" description="call eclipse.clean in the Matlab language">
		<ant dir="${matlab.dir}" target="eclipse.clean" inheritall="false" />
	</target>

	<target name="set.matlab.bin.dir.no.eclipse" unless="inside.eclipse">
		<property name="matlab.bin.dir" value="${matlab.ant.bin.dir}" />
	</target>

	<target name="set.matlab.bin.dir.eclipse" if="inside.eclipse">
		<property name="matlab.bin.dir" value="${matlab.eclipse.bin.dir}" />
	</target>

	<target name="set.matlab.bin.dir" depends="set.matlab.bin.dir.no.eclipse, set.matlab.bin.dir.eclipse" />

	<target name="set.bin.dir" depends="set.matlab.bin.dir, BinDir.set.bin.dir">
		<path id="compile.classpath">
			<path refid="junit.jar.path" />
			<path refid="beaver.rt.jar.path" />
			<path refid="antlr.jar.path" />
      <path refid="guava.jar.path" />
			<path location="${basedir}/${matlab.bin.dir}" />
		</path>
		<path id="test.classpath">
			<path refid="junit.jar.path" />
			<path refid="beaver.rt.jar.path" />
			<path refid="antlr.jar.path" />
      <path refid="guava.jar.path" />
			<path location="${basedir}/${bin.dir}" />
			<path location="${basedir}/${matlab.bin.dir}" />
      <path location="${basedir}/resources" />
		</path>
	</target>

	<!--=====================================================================-->
	<!-- Public Targets                                                      -->
	<!--=====================================================================-->

	<import file="../shared/cli.xml" />
	<import file="../shared/eclipse.xml" />

  <macrodef name="natlab-jar">
  <attribute name="excludes" default="" />
  <attribute name="basename" />
  <sequential>
    <jar destfile="@{basename}.jar">
      <manifest><attribute name="Main-Class" value="${entrypoint.class}" /></manifest>
      <zipfileset src="${lib.dir}/${beaver.rt.jar.path.prop}">
        <patternset> <exclude name="META-INF/**" /> </patternset>
      </zipfileset>
      <zipfileset src="${lib.dir}/${antlr3.rt.jar.path.prop}">
        <patternset> <exclude name="META-INF/**" /> </patternset>
      </zipfileset>
      <zipfileset src="${lib.dir}/${string.template.jar.path.prop}">
        <patternset> <exclude name="META-INF/**" /> </patternset>
      </zipfileset>
      <zipfileset src="${lib.dir}/${antlr2.jar.path.prop}">
        <patternset> <exclude name="META-INF/**" /> </patternset>
      </zipfileset>
      <zipfileset src="${lib.dir}/${guava.jar.path.prop}">
        <patternset> <exclude name="META-INF/**" /> </patternset>
      </zipfileset>
      <zipfileset dir="${matlab.bin.dir}/" includes="**/*.class" />
      <fileset dir="${basedir}/resources" />  
      <fileset dir="${basedir}/${bin.dir}" includes="**/*.class" excludes="@{excludes}" />
    </jar>
    <echo file="@{basename}.sh">
      ${entrypoint.script.header}
      java -jar "${basedir}/@{basename}.jar" $$*
    </echo>
    <chmod file="@{basename}.sh" perm="755" />  
  </sequential>
  </macrodef>

	<!-- public versions of cli.xml targets -->
	<target name="build" depends="matlab.build, CommandLineInterface.build" description="generate and build all files (including matlab)">
	</target>
	<target name="clean" depends="CommandLineInterface.clean" description="deletes all files produced by build" />
	<target name="test" depends="CommandLineInterface.test" description="runs all JUnit tests" />

  <target name="jar" depends="matlab.build, clean, jar_noclean" description="creates an executable release jar" />
	<target name="jar_noclean" depends="gen, compile" 
          description="creates an executable release jar without cleaning first">
    <natlab-jar basename="${entrypoint.name}" />
	</target>

	<!-- jar build without tame and backend-->
  <target name="jar-frontend" depends="matlab.build, clean, jar_noclean_frontend" 
          description="creates an executable release jar" />
	<target name="jar_noclean_frontend" depends="gen, compile" 
          description="creates an executable release jar without cleaning first">
		<natlab-jar basename="${entrypoint.frontend.name}" excludes="**/tame/**,**/backends/**" />
	</target>

	<!-- jar build without backend-->
  <target name="jar-with-tamer" depends="matlab.build, clean, jar_noclean_tame" 
          description="creates an executable release jar" />
	<target name="jar_noclean_tame" depends="gen, compile" 
          description="creates an executable release jar without cleaning first">
		<natlab-jar basename="${entrypoint.mcsaf_with_tamer.name}" excludes="**/backends/**" />
	</target>
 
	<!-- jar build with x10 backend-->
  <target name="jar-mix10" depends="matlab.build, clean, jar_noclean_mix10"
          description="creates an executable release jar" />
	<target name="jar_noclean_mix10" depends="gen, compile" description="creates an executable release jar without cleaning first">
		<natlab-jar basename="${entrypoint.x10_backend.name}" excludes="**/Fortran/**" />
	</target>
 
	<!-- jar build with fortran  backend-->
  <target name="jar-fortran-backend" depends="matlab.build, clean, jar_noclean_fb"
          description="creates an executable release jar" />
	<target name="jar_noclean_fb" depends="gen, compile" 
          description="creates an executable release jar without cleaning first">
		<natlab-jar basename="${entrypoint.fortran_backend.name}" excludes="**/x10/**" />
	</target>

	<!-- public versions of eclipse.xml targets -->
	<target name="eclipse.build" depends="matlab.eclipse.build, Eclipse.eclipse.build" description="generate all files (including matlab), let Eclipse build" />
	<target name="eclipse.clean" depends="Eclipse.eclipse.clean" description="deletes all files produced by build.eclipse" />
	<target name="eclipse.test" depends="Eclipse.eclipse.test" description="runs all JUnit tests, as built by Eclipse" />
	<target name="Natlab.gen" depends="gen" description="Just generates the Natlab related code" />

 </project>
