//import natlab.backends.x10.IRx10.ast.Args;
import natlab.backends.x10.IRx10.ast.List;
import natlab.backends.x10.IRx10.ast.PPHelper;
import natlab.backends.x10.IRx10.ast.Stmt;
import java.util.*;

aspect PrettyPrinter{
String ASTNode.pp(String indent){return indent;}

public String Program.pp(String indent, String className){
	return getClassBlock().pp(indent, className);
}

String ClassBlock.pp(String indent,String className){
	StringBuffer x = new StringBuffer();
	x.append("class "+className+"{\n");
	for(Stmt decl_stmt : getDeclStmtList()){
		x.append(decl_stmt.pp(indent+"	"));
	}
	for (Method method : getMethodList()){
		x.append(method.pp(indent+"	"));
	x.append("\n}");

	}
	return x.toString();
}

String DeclStmt.pp(String indent){
		StringBuffer x = new StringBuffer();

		if (null != getLHS()) {
			/**
			 * It is not a list assignment
			 */

			if (null == getLHS().getShape()) {
				/* Scalar variable */
				x.append("var " + getLHS().getName() + ": "
						+ getLHS().getType().getName());
				if (hasRHS()){
				x.append(" = ");
				x.append(getRHS().pp(""));
				}
				x.append(";\n");

			}

			else if (null != getLHS().getShape()) {
				boolean tf = true;
				for (int i = 0; i < getLHS().getShape().size(); i++) {
					if(null != getLHS().getShape().get(i))
					tf &= ("1").equals(getLHS().getShape().get(i).toString());
				}
				if (tf) {

					/* Scalar variable */
					x.append("var " + getLHS().getName() + ": "
							+ getLHS().getType().getName());
					if (hasRHS()){
						x.append(" = ");
						x.append(getRHS().pp(""));
						}
						x.append(";\n");
				}

			 else // array
			{

				x.append("val " + getLHS().getName() + " = " + "new Array["
						+ getLHS().getType().getName() + "]" + "("
						+ PPHelper.makeRange(getLHS().getShape()) + ", "
						+ getRHS().pp("") + ");\n");
			}
		} //FIX THIS IN aspect
			

		} else {
			/**
			 * TODO Case when assigned to a list
			 */
		}
		return x.toString();
	}
	
String ArraySetStmt.pp(String indent){
		StringBuffer x = new StringBuffer();
		
						
			x.append(getLHS().getValue().pp(indent));
			x.append(" = ");
			x.append(getRHS().pp("")+" ;\n");
		return x.toString();
	}
  

  String ArrayAccess.pp(String indent)
  {
  	  StringBuffer x = new StringBuffer();
  	  x.append(indent);
  	  x.append(getArrayID().getID()+"(");
  	  x.append(getIndicesList().getChild(0).pp(""));
  	  for(int i=1; i<getIndicesList().getNumChild() ; i++)
  	  {
  		  x.append(", "+getIndicesList().getChild(i).pp(""));
  	  }
  	  x.append(")");
  	  return x.toString();
  }



static String PPHelper.makeRange(ArrayList Shape){
	StringBuffer s = new StringBuffer();
	s.append("(1.."+Shape.get(0)+")");
	for(int i=1; i<Shape.size();i++)
			{
				s.append("*(1.."+Shape.get(i)+")");
			}
	return s.toString();
}

String Method.pp(String indent)
{
	  StringBuffer x = new StringBuffer();
	  x.append(indent+ getMethodHeader().pp("")+"\n"+getMethodBlock().pp(indent+"    "));
	  
	  return x.toString();
}

String MethodHeader.pp(String indent)
{
	StringBuffer x = new StringBuffer();
	
	x.append(indent+"static def "+getName()+" ("+PPHelper.makeArgs(getArgsList())+")");
	
	return x.toString();
}

static String PPHelper.makeArgs(List<IDInfo> argsList) 
{
	StringBuffer s = new StringBuffer();
	if (argsList.getNumChild()>0){
	s.append(argsList.getChild(0).getName()+": "+argsList.getChild(0).getType().getName());
	for (int i=1; i<argsList.numChildren ; i++)
	{
		s.append(", "+argsList.getChild(i).getName()+": "+argsList.getChild(i).getType().getName());
	}
	}
	return s.toString();
}

String StmtBlock.pp(String indent)
{
  	StringBuffer x = new StringBuffer();
  	x.append(indent+"{\n");
  	for (Stmt stmt : getStmtList())
  	{
  		x.append(stmt.pp(indent));
  	}
  	x.append("}\n");
  	return x.toString();
  }


String AssignStmt.pp(String indent) {
		StringBuffer x = new StringBuffer();
		if (null != getLHS()) {
			/**
			 * It is not a list assignment
			 */

			if (null == getLHS().getShape()) {
				/* Scalar variable */
				x.append(getLHS().getName());
				x.append(" = ");
				x.append(getRHS().pp("") + ";\n");

			}

			else if (null != getLHS().getShape()) {
				boolean tf = true;
				for (int i = 0; i < getLHS().getShape().size(); i++) {
					if (null != getLHS().getShape().get(i))
						tf &= ("1").equals(getLHS().getShape().get(i)
								.toString());
				}
				if (tf) {

					/* Scalar variable */
					x.append(getLHS().getName());
					x.append(" = ");
					x.append(getRHS().pp("") + ";\n");

				}

				else // array
				{
					/**
					 * TODO Make sure if arrays can be aSSIGNED DIRECTLY LIKE
					 * VARIABLES. wHAT ARE THE RESTRICTIONS ?
					 */
					x.append(getLHS().getName());
					x.append(" = ");
					x.append(getRHS().pp("") + ";\n");
					//
					// x.append("val "+getLHS().getName()+" = "+
					// "new Array["+getLHS().getType().getName()+"]"+
					// "("+PPHelper.makeRange(getLHS().getShape())+
					// ", "+getRHS().pp("")+");\n");
				}
			}
		} else {

			System.out.println("list assign:" + getRHS().pp(indent));
			/**
			 * TODO Case when assigned to a list
			 */
			if (!hasMultiAssignLHS()
					|| 0 == getMultiAssignLHS().getIDInfoList().getNumChild()) { // ||
																					// getMultiAssignLHS().getNumChild()
																					// ==0
				x.append(getRHS().pp(indent) + " ;\n");
			} else {
				x.append("val "
						+ "generate_a_name"
						+ " = "
						+ "new Array[Any]"
						+ "(0.."
						+ (getMultiAssignLHS().getIDInfoList().getNumChild() - 1)
						+ ", " + getRHS().pp("") + ");\n");
			}

		}
		return x.toString();
	}
	
String IDUse.pp(String indent){
	StringBuffer x = new StringBuffer();
	x.append(indent+getID());
	return x.toString();
}

String PreIncExp.pp(String indent)
{
	return (indent+"(++"+getOperand().pp("")+")");
}

String PreDecExp.pp(String indent)
{
	return (indent+"(--"+getOperand().pp("")+")");
	
}

String MinusExp.pp(String indent)
{
	return (indent+"(-"+getOperand().pp("")+")");
}

String PlusExp.pp(String indent)
{
	return (indent+"(+"+getOperand().pp("")+")");
}
	
String NegExp.pp(String indent)
{
	return (indent+"(!"+getOperand().pp("")+")");
}

String Literal.pp(String indent)
{
	return (indent+getLiteral());
}

String MulExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" * "+getRightOp().pp("")+")");
}

String DivExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" / "+getRightOp().pp("")+")");
}

String ModExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" % "+getRightOp().pp("")+")");
}

String AddExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" + "+getRightOp().pp("")+")");
}

String SubExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" - "+getRightOp().pp("")+")");
}

String IncExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" + "+getRightOp().pp("")+")");
}

String DecExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" - "+getRightOp().pp("")+")");
}

String LTExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" > "+getRightOp().pp("")+")");
}

String LEExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" <= "+getRightOp().pp("")+")");
}

String GEExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" >= "+getRightOp().pp("")+")");
}

String EQExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" == "+getRightOp().pp("")+")");
}

String NEExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" != "+getRightOp().pp("")+")");
}

String AndExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" && "+getRightOp().pp("")+")");
}

String OrExp.pp(String indent)
{
	return(indent+"("+getLeftOp().pp("")+" || "+getRightOp().pp("")+")");
}

String ForStmt.pp (String indent){
	  StringBuffer x= new StringBuffer();
	  x.append(indent);
	  x.append("for ("+this.getAssignStmt().pp("")+getCondition().pp("")+";"+getStepper().getLeftOp().pp("")+" = "+getStepper().pp("")+")\n"+getLoopBody().pp(indent+"    "));
	  return x.toString();
}

String WhileStmt.pp(String indent)
{
	  StringBuffer x = new StringBuffer();
	  x.append(indent);
	  x.append("while ("+getCondition().pp("")+")\n"+getLoopBody().pp(indent+"   "));
	  return x.toString();
}

String IfElseStmt.pp(String indent)
{   
	
	StringBuffer x = new StringBuffer();
	x.append(indent);
	  x.append("inside if else ");
	x.append("if ("+getIfElseIfList().getChild(0).getCondition().pp("")+")\n");
	x.append(getIfElseIfList().getChild(0).getIfBody().pp(indent+"    "));
	for (int i=1; i<getIfElseIfList().getNumChild() ; i++){
		x.append("else if ("+getIfElseIfList().getChild(i).getCondition().pp("")+")\n");
	  	x.append(getIfElseIfList().getChild(i).getIfBody().pp(indent+"    "));
	}
	if(null != getElseBody()){
		x.append("else \n"+getElseBody().pp(indent+"    "));
	}
	return x.toString();
}

String BuiltinMethodCall.pp(String indent)
{
	  StringBuffer x = new StringBuffer();
	  x.append(indent);
	  x.append(getBuiltinMethodName().getName()+"(");
	  x.append(getArgumentList().getChild(0).pp(""));
	  for(int i=1; i<getArgumentList().getNumChild() ; i++)
	  {
		  x.append(", "+getArgumentList().getChild(i).pp(""));
	  }
	  x.append(")");
	  return x.toString();
}

String UserDefMethodCall.pp(String indent)
{
	  StringBuffer x = new StringBuffer();
	  x.append(indent);
	  x.append(getUserDefMethodName().getName()+"(");
	  if(getArgumentList().getNumChild()>0){
	  x.append(getArgumentList().getChild(0).pp(""));
	  for(int i=1; i<getArgumentList().getNumChild() ; i++)
	  {
		  x.append(", "+getArgumentList().getChild(i).pp(""));
	  }
	  }
	  x.append(")");
	  return x.toString();
}
String CommentStmt.pp(String indent)
{
	StringBuffer x = new StringBuffer();
	String trimmedComment = getComment().trim();
	if(!(("").equals(trimmedComment)))
	{
	x.append("//");
	x.append(getComment());
	x.append("\n");
	}
	return x.toString();
}

}	
	
